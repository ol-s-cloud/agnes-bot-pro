// Agnes Bot Pro - Database Schema
// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USER MANAGEMENT =====
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Trading preferences
  preferredMode TradingMode @default(DEMO)
  riskTolerance RiskLevel   @default(MEDIUM)

  // Relations
  accounts         Account[]
  sessions         Session[]
  tradingAccounts  TradingAccount[]
  orders           Order[]
  portfolios       Portfolio[]
  strategies       Strategy[]
  notifications    Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ===== TRADING ACCOUNTS =====
model TradingAccount {
  id          String        @id @default(cuid())
  userId      String
  platform    TradingPlatform
  accountType AccountType
  accountId   String        // External account ID
  nickname    String?       // User-friendly name
  isActive    Boolean       @default(true)
  isDemo      Boolean       @default(true)
  
  // API Credentials (encrypted)
  apiKey      String?       @db.Text
  apiSecret   String?       @db.Text
  apiUrl      String?
  
  // Account info
  balance     Decimal       @default(0) @db.Decimal(20, 8)
  equity      Decimal       @default(0) @db.Decimal(20, 8)
  margin      Decimal       @default(0) @db.Decimal(20, 8)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lastSync    DateTime?

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  positions   Position[]
  portfolios  Portfolio[]

  @@unique([userId, platform, accountId])
  @@map("trading_accounts")
}

// ===== PORTFOLIO MANAGEMENT =====
model Portfolio {
  id              String    @id @default(cuid())
  userId          String
  tradingAccountId String
  name            String
  
  // Portfolio metrics
  totalValue      Decimal   @default(0) @db.Decimal(20, 8)
  totalCost       Decimal   @default(0) @db.Decimal(20, 8)
  totalPnL        Decimal   @default(0) @db.Decimal(20, 8)
  totalPnLPercent Decimal   @default(0) @db.Decimal(10, 4)
  dayPnL          Decimal   @default(0) @db.Decimal(20, 8)
  dayPnLPercent   Decimal   @default(0) @db.Decimal(10, 4)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradingAccount  TradingAccount @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade)
  positions       Position[]

  @@map("portfolios")
}

model Position {
  id              String    @id @default(cuid())
  portfolioId     String
  tradingAccountId String
  symbol          String
  side            OrderSide
  
  // Position details
  quantity        Decimal   @db.Decimal(20, 8)
  avgPrice        Decimal   @db.Decimal(20, 8)
  currentPrice    Decimal   @db.Decimal(20, 8)
  marketValue     Decimal   @db.Decimal(20, 8)
  costBasis       Decimal   @db.Decimal(20, 8)
  
  // P&L calculations
  unrealizedPnL   Decimal   @db.Decimal(20, 8)
  realizedPnL     Decimal   @default(0) @db.Decimal(20, 8)
  totalPnL        Decimal   @db.Decimal(20, 8)
  pnlPercent      Decimal   @db.Decimal(10, 4)
  
  openedAt        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  closedAt        DateTime?

  // Relations
  portfolio       Portfolio      @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  tradingAccount  TradingAccount @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade)
  orders          Order[]

  @@unique([portfolioId, symbol])
  @@map("positions")
}

// ===== ORDER MANAGEMENT =====
model Order {
  id              String    @id @default(cuid())
  userId          String
  tradingAccountId String
  positionId      String?
  
  // Order details
  symbol          String
  side            OrderSide
  type            OrderType
  quantity        Decimal   @db.Decimal(20, 8)
  price           Decimal?  @db.Decimal(20, 8)
  stopPrice       Decimal?  @db.Decimal(20, 8)
  
  // Order status
  status          OrderStatus @default(PENDING)
  filledQuantity  Decimal     @default(0) @db.Decimal(20, 8)
  avgFillPrice    Decimal?    @db.Decimal(20, 8)
  
  // External references
  externalOrderId String?
  clientOrderId   String?
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  filledAt        DateTime?
  cancelledAt     DateTime?

  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradingAccount  TradingAccount @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade)
  position        Position?      @relation(fields: [positionId], references: [id])
  fills           OrderFill[]

  @@map("orders")
}

model OrderFill {
  id          String    @id @default(cuid())
  orderId     String
  quantity    Decimal   @db.Decimal(20, 8)
  price       Decimal   @db.Decimal(20, 8)
  commission  Decimal   @default(0) @db.Decimal(20, 8)
  timestamp   DateTime  @default(now())

  // Relations
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_fills")
}

// ===== STRATEGY MANAGEMENT =====
model Strategy {
  id          String        @id @default(cuid())
  userId      String
  name        String
  description String?
  type        StrategyType
  config      Json          // Strategy-specific configuration
  isActive    Boolean       @default(false)
  isDemo      Boolean       @default(true)
  
  // Performance metrics
  totalTrades   Int           @default(0)
  winRate       Decimal       @default(0) @db.Decimal(5, 2)
  totalPnL      Decimal       @default(0) @db.Decimal(20, 8)
  maxDrawdown   Decimal       @default(0) @db.Decimal(10, 4)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("strategies")
}

// ===== NOTIFICATIONS =====
model Notification {
  id        String            @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?             // Additional data
  isRead    Boolean           @default(false)
  createdAt DateTime          @default(now())

  // Relations
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// ===== ENUMS =====
enum TradingMode {
  DEMO
  LIVE
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum TradingPlatform {
  BINANCE
  BYBIT
  TRADOVATE
  NINJATRADER
  COINBASE
  KRAKEN
}

enum AccountType {
  SPOT
  MARGIN
  FUTURES
  OPTIONS
}

enum OrderSide {
  BUY
  SELL
}

enum OrderType {
  MARKET
  LIMIT
  STOP
  STOP_LIMIT
  OCO
}

enum OrderStatus {
  PENDING
  SUBMITTED
  PARTIALLY_FILLED
  FILLED
  CANCELLED
  REJECTED
  EXPIRED
}

enum StrategyType {
  EMA_CROSSOVER
  MEAN_REVERSION
  ICT_STRATEGY
  CUSTOM
}

enum NotificationType {
  ORDER_FILLED
  ORDER_CANCELLED
  STRATEGY_ALERT
  ACCOUNT_UPDATE
  SYSTEM_ALERT
}