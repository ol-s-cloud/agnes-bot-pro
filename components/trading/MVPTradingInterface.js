/**\n * MVP Trading Interface - Simple and Functional\n * Users can start trading immediately with demo accounts\n */\n\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\n\nexport default function MVPTradingInterface() {\n  const { data: session } = useSession();\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [portfolio, setPortfolio] = useState(null);\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Order form state\n  const [orderData, setOrderData] = useState({\n    symbol: 'BTCUSDT',\n    side: 'BUY',\n    type: 'MARKET',\n    quantity: 0.001,\n    price: ''\n  });\n\n  // Popular trading pairs\n  const popularPairs = [\n    { symbol: 'BTCUSDT', name: 'Bitcoin' },\n    { symbol: 'ETHUSDT', name: 'Ethereum' },\n    { symbol: 'ADAUSDT', name: 'Cardano' },\n    { symbol: 'SOLUSDT', name: 'Solana' },\n    { symbol: 'DOTUSDT', name: 'Polkadot' }\n  ];\n\n  useEffect(() => {\n    if (session?.user) {\n      loadUserData();\n    }\n  }, [session]);\n\n  async function loadUserData() {\n    try {\n      // Load accounts\n      const accountsRes = await fetch('/api/trading/accounts');\n      const accountsData = await accountsRes.json();\n      setAccounts(accountsData.accounts || []);\n\n      // Select first account if available\n      if (accountsData.accounts?.length > 0) {\n        setSelectedAccount(accountsData.accounts[0]);\n      }\n\n      // Load portfolio\n      const portfolioRes = await fetch('/api/trading/portfolio');\n      const portfolioData = await portfolioRes.json();\n      setPortfolio(portfolioData);\n\n      // Load recent orders\n      const ordersRes = await fetch('/api/trading/orders?limit=10');\n      const ordersData = await ordersRes.json();\n      setOrders(ordersData.orders || []);\n    } catch (error) {\n      console.error('Failed to load user data:', error);\n    }\n  }\n\n  async function createDemoAccount() {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/trading/accounts', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          platform: 'BINANCE',\n          accountType: 'SPOT',\n          nickname: 'Demo Trading Account',\n          isDemo: true\n        })\n      });\n\n      const data = await response.json();\n      if (data.success) {\n        await loadUserData();\n        alert('ðŸŽ‰ Demo account created! You can start trading immediately.');\n      } else {\n        alert('Failed to create account: ' + data.error);\n      }\n    } catch (error) {\n      alert('Error creating account: ' + error.message);\n    }\n    setLoading(false);\n  }\n\n  async function placeOrder() {\n    if (!selectedAccount) {\n      alert('Please select a trading account first');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/trading/orders', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          accountId: selectedAccount.id,\n          ...orderData\n        })\n      });\n\n      const data = await response.json();\n      if (data.success) {\n        alert(`âœ… Order placed successfully! ${orderData.side} ${orderData.quantity} ${orderData.symbol}`);\n        await loadUserData(); // Refresh data\n        \n        // Reset form\n        setOrderData({\n          ...orderData,\n          quantity: 0.001,\n          price: ''\n        });\n      } else {\n        alert('Order failed: ' + data.error);\n      }\n    } catch (error) {\n      alert('Error placing order: ' + error.message);\n    }\n    setLoading(false);\n  }\n\n  // Show setup screen if no accounts\n  if (!session?.user) {\n    return (\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\n        <div className=\"bg-gray-800 p-8 rounded-lg text-center\">\n          <h2 className=\"text-2xl font-bold text-white mb-4\">Welcome to Agnes Bot Pro</h2>\n          <p className=\"text-gray-300 mb-6\">Please sign in to start trading</p>\n          <button className=\"bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700\">\n            Sign In\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (accounts.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\n        <div className=\"bg-gray-800 p-8 rounded-lg text-center max-w-md\">\n          <h2 className=\"text-2xl font-bold text-white mb-4\">ðŸš€ Start Trading in 30 Seconds</h2>\n          <p className=\"text-gray-300 mb-6\">\n            Create a demo account and start trading immediately with simulated funds.\n            No API keys required!\n          </p>\n          <button \n            onClick={createDemoAccount}\n            disabled={loading}\n            className=\"bg-green-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-green-700 disabled:opacity-50\"\n          >\n            {loading ? 'Creating...' : 'ðŸŽ­ Create Demo Account'}\n          </button>\n          <p className=\"text-sm text-gray-400 mt-4\">\n            Demo mode uses simulated money - perfect for learning!\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      {/* Header */}\n      <div className=\"bg-gray-800 p-4 border-b border-gray-700\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold\">Agnes Bot Pro - Trading</h1>\n          <div className=\"flex items-center space-x-4\">\n            <select \n              value={selectedAccount?.id || ''}\n              onChange={(e) => setSelectedAccount(accounts.find(a => a.id === e.target.value))}\n              className=\"bg-gray-700 border border-gray-600 rounded px-3 py-2\"\n            >\n              {accounts.map(account => (\n                <option key={account.id} value={account.id}>\n                  {account.nickname} ({account.isDemo ? 'Demo' : 'Live'})\n                </option>\n              ))}\n            </select>\n            <div className={`px-3 py-1 rounded-full text-sm ${\n              selectedAccount?.isDemo ? 'bg-blue-600' : 'bg-green-600'\n            }`}>\n              {selectedAccount?.isDemo ? 'ðŸŽ­ DEMO' : 'ðŸ’° LIVE'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Trading Form */}\n          <div className=\"bg-gray-800 rounded-lg p-6\">\n            <h3 className=\"text-xl font-semibold mb-4\">ðŸ“ˆ Place Order</h3>\n            \n            {/* Symbol Selection */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium mb-2\">Trading Pair</label>\n              <select\n                value={orderData.symbol}\n                onChange={(e) => setOrderData({...orderData, symbol: e.target.value})}\n                className=\"w-full bg-gray-700 border border-gray-600 rounded px-3 py-2\"\n              >\n                {popularPairs.map(pair => (\n                  <option key={pair.symbol} value={pair.symbol}>\n                    {pair.symbol} - {pair.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Side Selection */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium mb-2\">Order Side</label>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => setOrderData({...orderData, side: 'BUY'})}\n                  className={`flex-1 py-2 rounded font-semibold ${\n                    orderData.side === 'BUY' ? 'bg-green-600' : 'bg-gray-700'\n                  }`}\n                >\n                  ðŸŸ¢ BUY\n                </button>\n                <button\n                  onClick={() => setOrderData({...orderData, side: 'SELL'})}\n                  className={`flex-1 py-2 rounded font-semibold ${\n                    orderData.side === 'SELL' ? 'bg-red-600' : 'bg-gray-700'\n                  }`}\n                >\n                  ðŸ”´ SELL\n                </button>\n              </div>\n            </div>\n\n            {/* Order Type */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium mb-2\">Order Type</label>\n              <select\n                value={orderData.type}\n                onChange={(e) => setOrderData({...orderData, type: e.target.value})}\n                className=\"w-full bg-gray-700 border border-gray-600 rounded px-3 py-2\"\n              >\n                <option value=\"MARKET\">Market (Instant)</option>\n                <option value=\"LIMIT\">Limit (Set Price)</option>\n              </select>\n            </div>\n\n            {/* Quantity */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium mb-2\">Quantity</label>\n              <input\n                type=\"number\"\n                step=\"0.000001\"\n                min=\"0\"\n                value={orderData.quantity}\n                onChange={(e) => setOrderData({...orderData, quantity: parseFloat(e.target.value) || 0})}\n                className=\"w-full bg-gray-700 border border-gray-600 rounded px-3 py-2\"\n              />\n            </div>\n\n            {/* Price (for limit orders) */}\n            {orderData.type === 'LIMIT' && (\n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium mb-2\">Price (USDT)</label>\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={orderData.price}\n                  onChange={(e) => setOrderData({...orderData, price: e.target.value})}\n                  className=\"w-full bg-gray-700 border border-gray-600 rounded px-3 py-2\"\n                />\n              </div>\n            )}\n\n            {/* Submit Button */}\n            <button\n              onClick={placeOrder}\n              disabled={loading || !orderData.quantity}\n              className={`w-full py-3 rounded-lg font-semibold ${\n                orderData.side === 'BUY' ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'\n              } disabled:opacity-50`}\n            >\n              {loading ? 'Placing Order...' : `${orderData.side} ${orderData.symbol}`}\n            </button>\n\n            {selectedAccount?.isDemo && (\n              <p className=\"text-sm text-blue-400 mt-2 text-center\">\n                ðŸŽ­ Demo mode - Using simulated funds\n              </p>\n            )}\n          </div>\n\n          {/* Portfolio Summary */}\n          <div className=\"bg-gray-800 rounded-lg p-6\">\n            <h3 className=\"text-xl font-semibold mb-4\">ðŸ’¼ Portfolio</h3>\n            \n            {portfolio?.totals ? (\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Total Value:</span>\n                  <span className=\"font-semibold\">${portfolio.totals.totalValue.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Total P&L:</span>\n                  <span className={`font-semibold ${\n                    portfolio.totals.totalPnL >= 0 ? 'text-green-400' : 'text-red-400'\n                  }`}>\n                    ${portfolio.totals.totalPnL.toFixed(2)} ({portfolio.totals.totalPnLPercent.toFixed(2)}%)\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Positions:</span>\n                  <span>{portfolio.totals.positionCount}</span>\n                </div>\n\n                {/* Current Positions */}\n                {portfolio.portfolios?.[0]?.positions?.length > 0 && (\n                  <div className=\"mt-4 border-t border-gray-700 pt-4\">\n                    <h4 className=\"font-medium mb-2\">Current Positions</h4>\n                    <div className=\"space-y-2\">\n                      {portfolio.portfolios[0].positions.map(position => (\n                        <div key={position.id} className=\"flex justify-between text-sm\">\n                          <span>{position.symbol}</span>\n                          <span className={`${\n                            parseFloat(position.unrealizedPnL) >= 0 ? 'text-green-400' : 'text-red-400'\n                          }`}>\n                            {parseFloat(position.quantity).toFixed(6)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-center text-gray-400\">\n                <p>No positions yet</p>\n                <p className=\"text-sm mt-2\">Place your first order to get started!</p>\n              </div>\n            )}\n          </div>\n\n          {/* Recent Orders */}\n          <div className=\"bg-gray-800 rounded-lg p-6\">\n            <h3 className=\"text-xl font-semibold mb-4\">ðŸ“‹ Recent Orders</h3>\n            \n            {orders.length > 0 ? (\n              <div className=\"space-y-3\">\n                {orders.slice(0, 8).map(order => (\n                  <div key={order.id} className=\"flex justify-between items-center text-sm\">\n                    <div>\n                      <div className=\"font-medium\">{order.symbol}</div>\n                      <div className=\"text-gray-400\">\n                        {order.side} {parseFloat(order.quantity).toFixed(6)}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={`font-medium ${\n                        order.status === 'FILLED' ? 'text-green-400' :\n                        order.status === 'CANCELLED' ? 'text-red-400' :\n                        order.status === 'REJECTED' ? 'text-red-400' :\n                        'text-yellow-400'\n                      }`}>\n                        {order.status}\n                      </div>\n                      <div className=\"text-gray-400 text-xs\">\n                        {new Date(order.createdAt).toLocaleTimeString()}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center text-gray-400\">\n                <p>No orders yet</p>\n                <p className=\"text-sm mt-2\">Your trading history will appear here</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-6 grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <button \n            onClick={createDemoAccount}\n            disabled={loading}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white p-4 rounded-lg font-semibold disabled:opacity-50\"\n          >\n            ðŸŽ­ Add Demo Account\n          </button>\n          \n          <button \n            onClick={() => window.location.reload()}\n            className=\"bg-gray-600 hover:bg-gray-700 text-white p-4 rounded-lg font-semibold\"\n          >\n            ðŸ”„ Refresh Data\n          </button>\n          \n          <button \n            onClick={() => setOrderData({...orderData, quantity: 0.01})}\n            className=\"bg-purple-600 hover:bg-purple-700 text-white p-4 rounded-lg font-semibold\"\n          >\n            ðŸ’Ž Quick Buy 0.01\n          </button>\n          \n          <button \n            onClick={() => alert('Coming soon: Add live trading account with real API keys!')}\n            className=\"bg-green-600 hover:bg-green-700 text-white p-4 rounded-lg font-semibold\"\n          >\n            ðŸ’° Go Live\n          </button>\n        </div>\n\n        {/* MVP Status */}\n        <div className=\"mt-6 bg-blue-900 border border-blue-700 rounded-lg p-4\">\n          <h3 className=\"font-semibold mb-2\">ðŸš€ Agnes Bot Pro MVP</h3>\n          <p className=\"text-sm text-blue-100\">\n            You're using the MVP version with demo trading. All orders are simulated but realistic.\n            Ready to go live? Add your real API keys in account settings!\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}"